// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _13TPI_Pet_Adoption_and_Foster_Centre_NZ.Data;

#nullable disable

namespace _13TPI_Pet_Adoption_and_Foster_Centre_NZ.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20251013220940_LocationreferenceShelter")]
    partial class LocationreferenceShelter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Models.Breed", b =>
                {
                    b.Property<int>("BreedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreedID"));

                    b.Property<string>("BreedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BreedID");

                    b.ToTable("Breed");

                    b.HasData(
                        new
                        {
                            BreedID = 1,
                            BreedName = "Shit Tzu"
                        },
                        new
                        {
                            BreedID = 2,
                            BreedName = "Chihuahua"
                        },
                        new
                        {
                            BreedID = 3,
                            BreedName = "Dalmation"
                        },
                        new
                        {
                            BreedID = 4,
                            BreedName = "German Shepard"
                        },
                        new
                        {
                            BreedID = 5,
                            BreedName = "Labrador"
                        });
                });

            modelBuilder.Entity("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("LocationID");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            LocationID = 1,
                            City = "Auckland",
                            Country = "NZ",
                            LocationName = "Central City",
                            State = "Auckland",
                            Street = "123 Main St",
                            ZipCode = "1010"
                        },
                        new
                        {
                            LocationID = 2,
                            City = "Auckland",
                            Country = "NZ",
                            LocationName = "Northside",
                            State = "Auckland",
                            Street = "456 North Rd",
                            ZipCode = "1021"
                        },
                        new
                        {
                            LocationID = 3,
                            City = "Auckland",
                            Country = "NZ",
                            LocationName = "East End",
                            State = "Auckland",
                            Street = "789 East Ave",
                            ZipCode = "1032"
                        },
                        new
                        {
                            LocationID = 4,
                            City = "Auckland",
                            Country = "NZ",
                            LocationName = "South Park",
                            State = "Auckland",
                            Street = "321 South St",
                            ZipCode = "1043"
                        },
                        new
                        {
                            LocationID = 5,
                            City = "Auckland",
                            Country = "NZ",
                            LocationName = "Westfield",
                            State = "Auckland",
                            Street = "654 West Rd",
                            ZipCode = "1054"
                        });
                });

            modelBuilder.Entity("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Models.Pet", b =>
                {
                    b.Property<int>("PetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PetID"));

                    b.Property<bool>("Adoption")
                        .HasColumnType("bit");

                    b.Property<int>("BreedID")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ShelterID")
                        .HasColumnType("int");

                    b.HasKey("PetID");

                    b.HasIndex("BreedID");

                    b.HasIndex("ShelterID");

                    b.ToTable("Pet");

                    b.HasData(
                        new
                        {
                            PetID = 1,
                            Adoption = false,
                            BreedID = 1,
                            Colour = "Brown",
                            PetName = "Max",
                            ShelterID = 1
                        },
                        new
                        {
                            PetID = 2,
                            Adoption = false,
                            BreedID = 2,
                            Colour = "Black",
                            PetName = "Bella",
                            ShelterID = 2
                        },
                        new
                        {
                            PetID = 3,
                            Adoption = false,
                            BreedID = 1,
                            Colour = "White",
                            PetName = "Charlie",
                            ShelterID = 1
                        },
                        new
                        {
                            PetID = 4,
                            Adoption = false,
                            BreedID = 3,
                            Colour = "Golden",
                            PetName = "Lucy",
                            ShelterID = 3
                        },
                        new
                        {
                            PetID = 5,
                            Adoption = false,
                            BreedID = 3,
                            Colour = "Golden",
                            PetName = "Walter",
                            ShelterID = 4
                        },
                        new
                        {
                            PetID = 6,
                            Adoption = false,
                            BreedID = 2,
                            Colour = "Orange",
                            PetName = "Carlos",
                            ShelterID = 2
                        },
                        new
                        {
                            PetID = 7,
                            Adoption = false,
                            BreedID = 3,
                            Colour = "Yellow",
                            PetName = "Michael",
                            ShelterID = 5
                        },
                        new
                        {
                            PetID = 8,
                            Adoption = false,
                            BreedID = 5,
                            Colour = "Brown",
                            PetName = "Oscar",
                            ShelterID = 4
                        },
                        new
                        {
                            PetID = 9,
                            Adoption = false,
                            BreedID = 3,
                            Colour = "Black",
                            PetName = "Fred",
                            ShelterID = 1
                        },
                        new
                        {
                            PetID = 10,
                            Adoption = false,
                            BreedID = 5,
                            Colour = "Tan",
                            PetName = "Lucas",
                            ShelterID = 2
                        },
                        new
                        {
                            PetID = 11,
                            Adoption = false,
                            BreedID = 3,
                            Colour = "White",
                            PetName = "Alonso",
                            ShelterID = 3
                        },
                        new
                        {
                            PetID = 12,
                            Adoption = false,
                            BreedID = 1,
                            Colour = "Grey",
                            PetName = "Alex",
                            ShelterID = 5
                        },
                        new
                        {
                            PetID = 13,
                            Adoption = false,
                            BreedID = 4,
                            Colour = "Red",
                            PetName = "Lawrence",
                            ShelterID = 10
                        });
                });

            modelBuilder.Entity("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Models.Shelter", b =>
                {
                    b.Property<int>("ShelterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelterID"));

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("ShelterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ShelterID");

                    b.HasIndex("LocationID");

                    b.ToTable("Shelter");

                    b.HasData(
                        new
                        {
                            ShelterID = 1,
                            LocationID = 1,
                            ShelterName = "Happy Tails Shelter"
                        },
                        new
                        {
                            ShelterID = 2,
                            LocationID = 2,
                            ShelterName = "Paws and Claws Rescue"
                        },
                        new
                        {
                            ShelterID = 3,
                            LocationID = 3,
                            ShelterName = "Furry Friends Haven"
                        },
                        new
                        {
                            ShelterID = 4,
                            LocationID = 4,
                            ShelterName = "Safe Haven Shelter"
                        },
                        new
                        {
                            ShelterID = 5,
                            LocationID = 5,
                            ShelterName = "Wagging Tails Rescue"
                        },
                        new
                        {
                            ShelterID = 6,
                            LocationID = 4,
                            ShelterName = "Cozy Paws Shelter"
                        },
                        new
                        {
                            ShelterID = 7,
                            LocationID = 3,
                            ShelterName = "Loving Arms Rescue"
                        },
                        new
                        {
                            ShelterID = 8,
                            LocationID = 2,
                            ShelterName = "Forever Home Shelter"
                        },
                        new
                        {
                            ShelterID = 9,
                            LocationID = 1,
                            ShelterName = "New Beginnings Rescue"
                        },
                        new
                        {
                            ShelterID = 10,
                            LocationID = 5,
                            ShelterName = "Caring Hearts Shelter"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Models.Pet", b =>
                {
                    b.HasOne("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Models.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Models.Shelter", "Shelter")
                        .WithMany()
                        .HasForeignKey("ShelterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Models.Shelter", b =>
                {
                    b.HasOne("_13TPI_Pet_Adoption_and_Foster_Centre_NZ.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
